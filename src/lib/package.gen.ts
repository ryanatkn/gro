import {load_package_json} from './package_json.ts';
import {create_src_json} from './src_json.ts';
import type {Gen} from './gen.ts';

// TODO rename? `Package_Json + Src_Json = package.ts` currently, idk

// TODO consider an api that uses magic imports like SvelteKit's `$app`, like `$repo/package.json`

/**
 * A convenience `gen` file that outputs `$lib/package.ts`,
 * which mirrors `package.json` but in TypeScript,
 * allowing apps to import typesafe data from their own `package.json`.
 */
export const gen: Gen = ({origin_path}) => {
	const package_json = load_package_json();
	const src_json = create_src_json(package_json, undefined);

	const is_this_belt = package_json.name === '@ryanatkn/belt'; // TODO more robust?

	return `
// generated by ${origin_path}

import type {Package_Json} from '${
		is_this_belt ? '$lib/package_json.js' : '@ryanatkn/belt/package_json.js'
	}';
import type {Src_Json} from '${is_this_belt ? '$lib/src_json.js' : '@ryanatkn/belt/src_json.js'}';

export const package_json: Package_Json = ${JSON.stringify(package_json)} as any;

export const src_json: Src_Json = ${JSON.stringify(src_json)} as any;

// generated by ${origin_path}
	`;
};
