import {EMPTY_OBJECT} from '@ryanatkn/belt/object.js';
import {throttle} from '@ryanatkn/belt/throttle.js';
import {Unreachable_Error} from '@ryanatkn/belt/error.js';
import {writeFileSync} from 'node:fs';
import {
	collect_css_classes,
	Css_Classes,
	generate_classes_css,
} from '@ryanatkn/moss/css_class_helpers.js';
import {css_classes_by_name} from '@ryanatkn/moss/css_classes.js';

import type {Plugin} from './plugin.js';
import type {Args} from './args.js';
import type {Cleanup_Watch} from './filer.js';
import {format_file} from './format_file.js';
import type {File_Filter} from './path.js';

const FLUSH_DEBOUNCE_DELAY = 500;

export interface Task_Args extends Args {
	watch?: boolean;
}

export interface Gro_Plugin_Moss_Options {
	include_classes?: Array<string> | Set<string> | null;
	outfile?: string;
	filter_file?: File_Filter | null;
	flush_debounce_delay?: number;
	banner?: string;
}

export const gro_plugin_moss = ({
	include_classes = null,
	outfile = 'src/routes/moss.css', // TODO maybe support multiple files using file filters to check where to collect them?
	filter_file = (p) => !p.includes('.test.') && !p.includes('/test/'), // TODO hacky, centralize this and maybe exclude other things like `.gen.` files
	flush_debounce_delay = FLUSH_DEBOUNCE_DELAY,
	banner = 'generated by gro_plugin_moss',
}: Gro_Plugin_Moss_Options = EMPTY_OBJECT): Plugin => {
	const css_classes = new Css_Classes(
		Array.isArray(include_classes) ? new Set(include_classes) : include_classes,
	);

	let previous_output: string | undefined;

	let flushing_timeout: NodeJS.Timeout | undefined;
	const queue_gen = () => {
		if (flushing_timeout === undefined) {
			flushing_timeout = setTimeout(() => {
				flushing_timeout = undefined;
				void flush_gen_queue();
			}); // the timeout batches synchronously
		}
	};
	const flush_gen_queue = throttle(
		async () => {
			console.log(`css_classes.get()`, css_classes.get());
			console.log(`css_classes_by_name`, css_classes_by_name);
			const css = generate_classes_css(css_classes.get(), css_classes_by_name);
			console.log(`css`, css);
			const contents = `/* ${banner} */\n\n${css}\n\n/* ${banner} */`;
			const output = await format_file(contents, {filepath: outfile});
			// TODO think about using gen to implement this, would have some nice benefits like automatic change detection
			if (output === previous_output) return;
			previous_output = output;
			writeFileSync(outfile, output);
		},
		{delay: flush_debounce_delay, when: 'trailing'},
	);

	let cleanup: Cleanup_Watch | undefined;

	return {
		name: 'gro_plugin_moss',
		setup: async ({filer}) => {
			console.log('SETUP');
			// When a file builds, check it and its tree of dependents
			// for any `.gen.` files that need to run.
			cleanup = await filer.watch((change, source_file) => {
				if (filter_file && !filter_file(source_file.id)) {
					return;
				}
				console.log('change', change.type, source_file.id);
				switch (change.type) {
					case 'add':
					case 'update': {
						if (source_file.contents !== null) {
							const classes = collect_css_classes(source_file.contents);
							css_classes.add(source_file.id, classes);
							queue_gen();
						}
						break;
					}
					case 'delete': {
						css_classes.delete(source_file.id);
						break;
					}
					default:
						throw new Unreachable_Error(change.type);
				}
			});
			queue_gen();
		},
		teardown: async () => {
			clearTimeout(flushing_timeout);
			if (cleanup !== undefined) {
				await cleanup();
				cleanup = undefined;
			}
		},
	};
};
