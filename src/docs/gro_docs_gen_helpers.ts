import {dirname, relative, basename} from 'node:path';
import {parse_path_parts, parse_path_segments} from '@ryanatkn/belt/path.js';
import {strip_start} from '@ryanatkn/belt/string.js';

import {to_output_file_name} from '../lib/gen.ts';
import {paths, base_path_to_path_id} from '../lib/paths.ts';

// TODO maybe extract some of these to `$lib/gen_helpers.ts`

export interface Gen_Doc_Context {
	origin_id: string;
	origin_dir: string;
	origin_base: string;
	root_path: string | undefined;
	base_dir: string;
	relative_path: string;
	relative_dir: string;
	output_file_name: string;
}

/**
 * Creates common context data used by documentation generators.
 */
export const create_gen_doc_context = (origin_id: string): Gen_Doc_Context => {
	const root_path = parse_path_segments(paths.root).at(-1);
	const origin_dir = dirname(origin_id);
	const origin_base = basename(origin_id);
	const base_dir = paths.source;
	const relative_path = strip_start(origin_id, base_dir);
	const relative_dir = dirname(relative_path);
	const output_file_name = to_output_file_name(origin_base);

	return {
		origin_id,
		origin_dir,
		origin_base,
		root_path,
		base_dir,
		relative_path,
		relative_dir,
		output_file_name,
	};
};

/**
 * Creates a GitHub-specific root link.
 */
export const create_root_link = (root_path: string | undefined): string => `[${root_path}](/../..)`;

/**
 * Creates breadcrumb navigation for documentation pages.
 */
export const create_breadcrumbs = (
	root_link: string,
	relative_dir: string,
	origin_dir: string,
	output_file_name: string,
	is_index_file: boolean = false,
): string => {
	const path_parts = parse_path_parts(relative_dir).map((relative_path_part) => {
		const segment = parse_path_segments(relative_path_part).at(-1);
		if (is_index_file && relative_path_part === relative_dir) {
			return segment;
		}
		const href = relative(origin_dir, base_path_to_path_id(relative_path_part)) || './';
		const final_href = href === '/..' ? '/../..' : href; // for GitHub, link to the right place, never `/blob`
		return `[${segment}](${final_href})`;
	});
	return '> <sub>' + [root_link, ...path_parts, output_file_name].join(' / ') + '</sub>';
};

/**
 * Creates a footer with the origin file reference.
 */
export const create_gen_footer = (origin_base: string): string =>
	`> <sub>generated by [${origin_base}](${origin_base})</sub>`;
